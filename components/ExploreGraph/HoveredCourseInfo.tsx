import {
  useEffect, useMemo, useState,
} from 'react';
import { useRouter } from 'next/router';
import { CURRENT_COURSES_TERMS, ExtendedClass, semesterToTerm } from '../../src/lib';
import { ClassCache, Schedules } from '../../src/features';
import { useAppDispatch, useAppSelector } from '../../src/utils/hooks';
import { InfoCard } from '../Modals/InfoCard';
import { getCourseModalContent } from '../Modals/CourseCardModal';
import { useMeiliClient } from '../../src/context/meili';
import { classNames } from '../../src/utils/styles';
import { sortSchedulesBySemester } from '../../src/utils/schedules';
import { TitleComponent } from '../YearSchedule/SemesterColumn/TitleComponent';

export type RatingType = 'meanRating' | 'meanHours';

// a scale of five emojis from least to most happy
export const EMOJI_SCALES: Record<RatingType, [string, string, string, string, string]> = {
  meanRating: ['🫣', '😬', '😊', '😍', '🤩'],
  // meanHours: ['😌', '😐', '😰', '😱', '💀'],
  meanHours: ['🥱', '😎', '🧐', '😰', '💀'],
};

export function HoveredCourseInfo({ courseId }: {
  courseId: string | null;
}) {
  const dispatch = useAppDispatch();
  const { client, error } = useMeiliClient();
  const [course, setCourse] = useState<ExtendedClass>();

  useEffect(() => {
    if (!courseId || !client || error) {
      setCourse(undefined);
      return;
    }

    dispatch(ClassCache.loadCourses(client, [courseId]))
      .then(([response]) => {
        setCourse(response);
      })
      .catch((e) => {
        console.error(e);
      });
  }, [client, courseId, dispatch, error]);

  const props = useMemo(() => (
    course
      ? getCourseModalContent(course)
      : {
        title: 'Hover a course to get started!',
        content: <GraphInstructions direction="column" />,
      }
  ), [course]);

  return <InfoCard isDialog={false} noExit {...props} />;
}

export function GraphInstructions({ direction }: { direction: 'row' | 'column' }) {
  const router = useRouter();
  const schedules = useAppSelector(Schedules.selectSchedules);
  const scheduleId = (router.query.scheduleId ?? null) as string | null;
  const r = 40;
  const size = r * 3;

  return (
    <div className={classNames(
      'flex items-center p-6',
      direction === 'column' ? 'flex-col-reverse space-y-4' : 'flex-row space-x-4',
    )}
    >
      <svg className="shrink-0" width={size} height={size} viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}>
        <circle r={r} fill="red" />
        <text textAnchor="middle" dominantBaseline="central" fontSize={r}>
          {EMOJI_SCALES.meanRating[4]}
        </text>
      </svg>

      <ul className="list-disc space-y-2">
        <li>
          Each
          {' '}
          <strong>circle</strong>
          {' '}
          represents a course.
        </li>
        <li>
          <strong>Size</strong>
          {' '}
          indicates the number of students.
        </li>
        <li>
          The
          {' '}
          <strong>emoji</strong>
          {' '}
          indicates the average rating.
        </li>
        <li>
          <strong>Click</strong>
          {' '}
          a course to browse
          {' '}
          <em>similar</em>
          {' '}
          ones. Or enable
          {' '}
          <strong>add opposites</strong>
          {' '}
          and see what happens!
        </li>
        <li>
          <strong>Right-click</strong>
          {' '}
          a course to focus on it.
        </li>
        <li className="text-red">
          Measures of similarity are generated by a language model and may be biased or inaccurate.
        </li>
      </ul>

      {direction === 'column' && (
        <div className="primary relative mx-auto">
          <TitleComponent
            chooseSchedule={(id) => id && router.replace({
              pathname: '/explore/[scheduleId]',
              query: { scheduleId: id },
            })}
            // show currently available schedules
            idList={sortSchedulesBySemester(schedules).filter((s) => CURRENT_COURSES_TERMS.includes(semesterToTerm(s))).map((s) => s.id)}
            scheduleId={scheduleId}
            showSettings={false}
            showCreate={false}
          />
        </div>
      )}
    </div>
  );
}
